import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import Navbar from './NavBar';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable'; // For custom table generation in PDF
import logo from '../../assets/logo2.png'; // Import the logo image

const styles = {
  showEmployeeList: {
    padding: '20px',
    backgroundColor: '#f8f9fa',
  },
  container: {
    maxWidth: '1200px',
    margin: 'auto',
    padding: '20px',
    borderRadius: '8px',
    boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)',
    backgroundColor: '#ffffff',
  },
  employeeTable: {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '20px',
    fontFamily: 'Arial, sans-serif',
  },
  tableHeader: {
    backgroundColor: '#4CAF50',
    color: 'white',
    fontSize: '16px',
    padding: '12px',
    textAlign: 'left',
  },
  tableRowEven: {
    backgroundColor: '#f9f9f9',
  },
  tableCell: {
    padding: '12px 15px',
    fontSize: '14px',
    color: '#333',
    textAlign: 'left',
    borderBottom: '1px solid #ddd',
  },
  searchInput: {
    marginBottom: '20px',
    padding: '10px',
    width: '400px',
    fontSize: '16px',
    borderRadius: '4px',
    border: '1px solid #ccc',
  },
  actionButton: {
    padding: '8px 16px',
    margin: '0 5px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '14px',
  },
  editButton: {
    backgroundColor: '#28a745', // Green
    color: 'white',
  },
  deleteButton: {
    backgroundColor: '#dc3545', // Red
    color: 'white',
  },
  pdfButton: {
    marginBottom: '20px',
    padding: '10px 20px',
    backgroundColor: '#007bff', // Blue
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    fontSize: '16px',
  },
  logoStyle: {
    height: '50px',
    width: 'auto',
  },
};

const EmployeeList = () => {
  const [employees, setEmployees] = useState([]);
  const [searchTerm, setSearchTerm] = useState(''); // State for search term

  useEffect(() => {
    axios.get('http://localhost:3000/api/FarmerPayments')
      .then((res) => {
        setEmployees(res.data);
      })
      .catch(() => {
        console.log("Error while fetching data");
      });
  }, []);

  // Generate custom PDF with table summary (without actions)
  const generatePDF = () => {
    const doc = new jsPDF();

    // Add company logo and header
    doc.addImage(logo, 'PNG', 10, 1, 50, 40); 
    doc.setFontSize(20);
    doc.text('Argo Export - Farmer Payment Summary', 70, 20);
    doc.setFontSize(12);
    doc.text('Contact: +94 112 345 678 | Email: info@argoexport.com | Address: Colombo, Sri Lanka', 10, 40);
    
    // Define table column headers and rows
    const tableColumnHeaders = [
      'Process ID',
      'NIC',
      'Amount (Rs)',
      'Payment Method',
      'Date & Time',
      'Payment Status'
    ];

    const tableRows = employees.map(employee => [
      employee.process_id,
      employee.nic,
      employee.amount,
      employee.payment_method,
      employee.date_time,
      employee.payment_status
    ]);

    // Add table to the PDF (autoTable plugin)
    autoTable(doc, {
      startY: 50, // Start after header and logo
      head: [tableColumnHeaders],
      body: tableRows,
      theme: 'grid',
      headStyles: { fillColor: [76, 175, 80] }, // Custom green header color
      styles: {
        fontSize: 10, // Adjust font size for clarity
        cellPadding: 5,
        minCellHeight: 10,
        halign: 'left',
        valign: 'middle',
      },
    });

    // Add footer with timestamp
    doc.setFontSize(10);
    doc.text(`Generated by Argo Export on ${new Date().toLocaleString()}`, 10, doc.internal.pageSize.height - 10);

    // Save the PDF
    doc.save('farmer_payment_summary.pdf');
  };

  // Filter employees based on the search term (both Process ID and NIC)
  const filteredEmployees = employees.filter(employee => 
    employee.process_id.toString().toLowerCase().includes(searchTerm.toLowerCase()) ||
    employee.nic.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleDelete = (employeeId) => {
    console.log("Delete ID:", employeeId);
  
    axios.delete(`http://localhost:3000/api/FarmerPayments/${employeeId}`) // Ensure backticks for the template literal
      .then(() => {
        setEmployees(employees.filter(emp => emp.process_id !== employeeId)); // Ensure the logic is within the .then() block
      })
      .catch((error) => {
        console.error("There was an error deleting the employee!", error);
      });
  };
  
  return (
    <div style={{ ...styles.showEmployeeList, marginTop: '100px' }}>
      <Navbar />
      <div className='' style={styles.container}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <button style={styles.pdfButton} onClick={generatePDF}>Download PDF</button>
          <img src={logo} alt="Argo Export Logo" style={styles.logoStyle} />
        </div>

        {/* Search Input */}
        <div style={{ marginBottom: '20px' }}>
          <input 
            type="text" 
            placeholder="Search by Process ID or NIC" 
            style={styles.searchInput} 
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
          />
        </div>

        {filteredEmployees.length === 0 ? (
          <p>No employee found</p>
        ) : (
          <table style={styles.employeeTable}>
            <thead>
              <tr>
                <th style={styles.tableHeader}>Process ID</th>
                <th style={styles.tableHeader}>NIC</th>
                <th style={styles.tableHeader}>Amount (Rs)</th>
                <th style={styles.tableHeader}>Payment Method</th>
                <th style={styles.tableHeader}>Date & Time</th>
                <th style={styles.tableHeader}>Payment Status</th>
                <th style={styles.tableHeader}>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredEmployees.map((employee, index) => (
                <tr key={index} style={index % 2 === 0 ? styles.tableRowEven : {}}>
                  <td style={styles.tableCell}>{employee.process_id}</td>
                  <td style={styles.tableCell}>{employee.nic}</td>
                  <td style={styles.tableCell}>{employee.amount}</td>
                  <td style={styles.tableCell}>{employee.payment_method}</td>
                  <td style={styles.tableCell}>{employee.date_time}</td>
                  <td style={styles.tableCell}>{employee.payment_status}</td>
                  <td style={styles.tableCell}>
                    <Link to={`/UpdateFarmnerPayment/${employee.process_id}`}>
                      <button style={{ ...styles.actionButton, ...styles.editButton }}>
                        Edit
                      </button>
                    </Link>
                    <button
                      style={{ ...styles.actionButton, ...styles.deleteButton }}
                      onClick={() => handleDelete(employee.process_id)}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default EmployeeList;
