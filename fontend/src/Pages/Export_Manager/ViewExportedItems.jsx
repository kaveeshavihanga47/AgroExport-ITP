import React, { useState, useEffect } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import { jsPDF } from "jspdf"; // Import jsPDF
import "jspdf-autotable"; // Import the autotable plugin for jsPDF
import Navbar from "../../Components/Navbar";
import logo from "../../assets/logo.jpg"; // Correct path to the logo

const styles = {
  container: {
    padding: '20px',
    backgroundColor: '#f8f9fa',
    fontFamily: 'Arial, sans-serif',
  },
  heading: {
    color: '#333',
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
    marginTop: '20px',
  },
  th: {
    padding: '15px',
    border: '1px solid #dee2e6',
    textAlign: 'left',
    backgroundColor: '#007bff',
    color: 'white',
  },
  td: {
    padding: '15px',
    border: '1px solid #dee2e6',
    textAlign: 'left',
  },
  trEven: {
    backgroundColor: '#f2f2f2',
  },
  button: {
    padding: '8px 12px',
    margin: '0 5px',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    transition: 'background-color 0.3s',
  },
  editButton: {
    backgroundColor: '#28a745',
    color: 'white',
  },
  deleteButton: {
    backgroundColor: '#dc3545',
    color: 'white',
  },
  editButtonHover: {
    backgroundColor: '#218838',
  },
  deleteButtonHover: {
    backgroundColor: '#c82333',
  },
  pdfButton: {
    backgroundColor: '#007bff',
    color: 'white',
  },
  searchBar: {
    padding: '10px',
    width: '300px',
    marginBottom: '20px',
    fontSize: '16px',
    borderRadius: '5px',
    border: '1px solid #dee2e6',
  }
};

const ViewExportedItems = () => {
  const [exports, setExports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState(""); // Add state for the search term

  useEffect(() => {
    axios.get("http://localhost:3000/api/exports")
      .then((res) => {
        if (Array.isArray(res.data)) {
          setExports(res.data);
        } else {
          throw new Error("Data format is not an array.");
        }
        setLoading(false);
      })
      .catch((err) => {
        setError("Failed to load data");
        setLoading(false);
      });
  }, []);

  const handleDelete = async (id) => {
    if (window.confirm("Are you sure you want to delete this item?")) {
      try {
        const response = await fetch(`http://localhost:3000/api/exports/${id}`, {
          method: "DELETE",
        });

        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        setExports((prevExports) => prevExports.filter((item) => item._id !== id));
        alert("Export deleted successfully!");
      } catch (error) {
        alert("Failed to delete export");
      }
    }
  };

  const generatePDF = () => {
    const doc = new jsPDF();
    doc.addImage(logo, 'JPEG', 10, 1, 50, 40); 
    doc.setFontSize(20);
    doc.text('Argo Export - Exported Items Summary', 70, 20);
    doc.setFontSize(12);
    doc.text('Contact: +94 112 345 678 | Email: info@argoexport.com | Address: Colombo, Sri Lanka', 10, 40);

    const tableColumnHeaders = [
      'Customer ID', 'Order ID', 'Item', 'Quantity', 'Date', 'Name', 'Country', 'Address', 'Export Cost'
    ];

    const tableRows = exports.map(item => [
      item.customerID, item.orderID, item.item, item.quantity, new Date(item.date).toLocaleDateString(),
      item.name, item.country, item.address, item.exportCost ? item.exportCost.toFixed(2) : 'N/A'
    ]);

    doc.autoTable({
      startY: 50,
      head: [tableColumnHeaders],
      body: tableRows,
      theme: 'grid',
      headStyles: { fillColor: [76, 175, 80] },
      styles: {
        fontSize: 10,
        cellPadding: 5,
        minCellHeight: 10,
        halign: 'left',
        valign: 'middle',
      },
    });

    doc.text(`Generated by Argo Export on ${new Date().toLocaleString()}`, 10, doc.internal.pageSize.height - 10);
    doc.save('exported_items_summary.pdf');
  };

  // Function to handle search and filter the exports based on Customer ID or Order ID
  const filteredExports = exports.filter((item) =>
    item.customerID.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.orderID.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) return <p>Loading...</p>;
  if (error) return <div>{error}</div>;

  return (
    <div>
      <Navbar />
      <div style={{...styles.container, marginTop: '100px'}}>
        <h1 className="text-center text-3xl font-bold mb-4">Exported Items</h1>
        <button
          style={{ ...styles.button, ...styles.pdfButton, marginBottom: '20px' }}
          onClick={generatePDF}
        >
          Generate PDF
        </button>

        {/* Search Bar */}
        <input
          type="text"
          style={styles.searchBar}
          placeholder="Search by Customer ID or Order ID"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />

        {filteredExports.length === 0 ? (
          <p>No exported items found</p>
        ) : (
          <table style={styles.table}>
            <thead>
              <tr>
                <th style={styles.th}>Customer ID</th>
                <th style={styles.th}>Order ID</th>
                <th style={styles.th}>Item</th>
                <th style={styles.th}>Quantity</th>
                <th style={styles.th}>Date</th>
                <th style={styles.th}>Name</th>
                <th style={styles.th}>Country</th>
                <th style={styles.th}>Address</th>
                <th style={styles.th}>Export Cost</th>
                <th style={styles.th}>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredExports.map((item, index) => (
                <tr key={item._id} style={index % 2 === 0 ? styles.trEven : {}}>
                  <td style={styles.td}>{item.customerID}</td>
                  <td style={styles.td}>{item.orderID}</td>
                  <td style={styles.td}>{item.item}</td>
                  <td style={styles.td}>{item.quantity}</td>
                  <td style={styles.td}>{new Date(item.date).toLocaleDateString()}</td>
                  <td style={styles.td}>{item.name}</td>
                  <td style={styles.td}>{item.country}</td>
                  <td style={styles.td}>{item.address}</td>
                  <td style={styles.td}>{item.exportCost ? item.exportCost.toFixed(2) : 'N/A'}</td>
                  <td style={styles.td}>
                    <Link to={`/editExportedItem/${item._id}`}>
                      <button
                        style={{ ...styles.button, ...styles.editButton }}
                        onMouseOver={(e) => (e.target.style.backgroundColor = styles.editButtonHover.backgroundColor)}
                        onMouseOut={(e) => (e.target.style.backgroundColor = styles.editButton.backgroundColor)}
                      >
                        Edit
                      </button>
                    </Link>
                    <button
                      style={{ ...styles.button, ...styles.deleteButton }}
                      onClick={() => handleDelete(item._id)}
                      onMouseOver={(e) => (e.target.style.backgroundColor = styles.deleteButtonHover.backgroundColor)}
                      onMouseOut={(e) => (e.target.style.backgroundColor = styles.deleteButton.backgroundColor)}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default ViewExportedItems;
     